{{- if .Values.wms.enabled }}
apiVersion: extensions/v1beta1
kind: Deployment
{{- $externalDb := .Values.global.externalDatabase }}
{{- $dc := .Values.global.datacube }}
{{- $image := .Values.global.image }}
{{- $prometheus := .Values.prometheus }}
{{- $profiling := .Values.profiling }}
{{- $envname := .Values.global.clusterInfo }}
metadata:
  name: "{{ .Release.Name }}-{{ $envname.envName }}-wms"
  labels:
    app: {{ template "datacube.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
{{- if not .Values.wms.autoscaling }}
  replicas: {{ .Values.minReplicas }}
{{- end }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.wms.maxSurge | quote }}
      maxUnavailable: {{ .Values.wms.maxUnavailable | quote }}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "datacube.name" . }}
        release: {{ .Release.Name }}
      annotations:
{{ toYaml .Values.wms.annotations | indent 8 }}
    spec:
      initContainers:
{{- if .Values.wmsConfig.image }}
      - name: wms-config
        image: "{{ $.Values.wmsConfig.image.repository }}:{{ $.Values.wmsConfig.image.tag }}"
        imagePullPolicy: {{ $.Values.wmsConfig.image.pullPolicy }}
        args: [ "cp", "-f", "{{ .Values.wmsConfig.image.src }}", "{{ .Values.wmsConfig.path }}/{{ .Values.wmsConfig.filename }}" ]
        volumeMounts:
        - mountPath: {{ .Values.wmsConfig.path }}
          name: wms-config-volume
{{- end }}
      containers:
      - name: wms
        env:
{{- if .Values.wmsConfig.url }}
        - name: WMS_CONFIG_URL
          value: {{ .Values.wmsConfig.url | quote }}
{{- end }}
{{- if or .Values.wmsConfig.configMap .Values.wmsConfig.image }}
        - value: "{{ .Values.wmsConfig.path }}/{{ .Values.wmsConfig.filename }}"
          name: WMS_CONFIG_PATH
{{- end }}
        - name: DB_HOSTNAME
          {{- if .Values.postgresql.enabled }}
          value: {{ include "postgres.fullname" . }}
          {{- else }}
          value: {{ $externalDb.host | quote }}
          {{ end }}
        - name: DB_PORT
          {{- if .Values.postgresql.enabled }}
          value: {{ .Values.postgresql.service.port | quote }}
          {{- else }}
          value: {{ $externalDb.port | quote }}
          {{- end }}
        - name: DB_DATABASE
          {{- if .Values.postgresql.enabled }}
          value: {{ .Values.postgresql.postgresqlDatabase | quote }}
          {{- else }}
          value: {{ $externalDb.database | quote }}
          {{- end }}
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              {{- if .Values.postgresql.enabled }}
              name: {{ .Values.postgresql.postgresqlUsername }}
              {{- else }}
              name: {{ $externalDb.database }}
              {{- end }}
              key: postgres-username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $externalDb.database }}
              key: postgres-password
        - name: VIRTUAL_HOST
          value: localhost,127.0.0.
        - name: DATACUBE_CONFIG_PATH
          value: {{ $dc.configPath }}
{{- if $prometheus.enabled }}
        - name: prometheus_multiproc_dir
          value: {{ $prometheus.path | quote }}
{{- end }}
{{- if $profiling.enabled }}
        - name: PROFILER_FILE_PATH
          value: {{ $profiling.path }}
        - name: PROFILER
          value: {{ 1 | quote }}
{{- end }}
{{- if .Values.wms.additionalEnvironmentVars }}
{{- range $arg, $value := .Values.wms.additionalEnvironmentVars }}
        - name: {{ $arg | quote }}
          value: {{ $value | quote }}
{{- end }}
{{- end }}
        image: "{{ $image.repository }}:{{ $image.tag }}"
        imagePullPolicy: {{ $image.pullPolicy }}
        ports:
        - containerPort: 8000
        resources:
{{ toYaml .Values.wms.resources | indent 10 }}
        livenessProbe:
          exec:
            command:
            - "/bin/sh"
            - "-c"
            - "curl --silent 'http://localhost:8000/?service=WMS&request=GetCapabilities&version=1.3.0' | grep -q -F '<Layer queryable=\"1\">'"
          initialDelaySeconds: 30
          periodSeconds: 30
        args: [ {{- range .Values.wms.dockerArgs }} {{ . | quote }}, {{ end -}} ]
        terminationGracePeriodSeconds: 60
        volumeMounts:
{{- if $prometheus.enabled }}
        - mountPath: {{ $prometheus.path }}
          name: prometheus-volume
{{- end }}
{{- if $profiling.enabled }}
        - mountPath: {{ $profiling.path }}
          name: profiling-volume
{{- end }}
{{- if or .Values.wmsConfig.configMap .Values.wmsConfig.image }}
        - mountPath: {{ .Values.wmsConfig.path }}
          name: wms-config-volume
{{- end }}
      restartPolicy: Always
      volumes:
{{- if $prometheus.enabled }}
      - name: prometheus-volume
        emptyDir: {}
{{- end }}
{{- if $profiling.enabled }}
      - name: profiling-volume
        emptyDir: {}
{{- end }}
{{- if or .Values.wmsConfig.configMap .Values.wmsConfig.image }}
      - name: wms-config-volume
{{- if .Values.wmsConfig.configMap }}
        configMap:
          name: {{ .Values.wmsConfig.configMap }}
{{- else if .Values.wmsConfig.image }}
        emptyDir: {}
{{- end }}
{{- end }}
status: {}
{{- end }}
